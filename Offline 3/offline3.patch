diff --git a/Makefile b/Makefile
index 39a99d7..37134b8 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/random.o 
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testprocinfo\
+	$U/_dummyproc\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..d8490d7 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);
+int             getpinfo(uint64);
+
+//random.c
+uint            random(void);
+int             randomrange(int lo,int hi);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..db72a67 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+#define DEFAULT_TICKET_COUNT 10
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..7d2e8cd 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -145,7 +146,10 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  p->initial_tickets=DEFAULT_TICKET_COUNT;
+  p->current_tickets=DEFAULT_TICKET_COUNT;
+  p->ticks_used=0;
+  p->q=1;
   return p;
 }
 
@@ -169,6 +173,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->current_tickets=0;
+  p->initial_tickets=0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -296,6 +302,11 @@ fork(void)
   }
   np->sz = p->sz;
 
+  // copy parent tickets to child tickets
+  np->initial_tickets = p->initial_tickets;
+  np->current_tickets = p->initial_tickets;
+
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -434,6 +445,35 @@ wait(uint64 addr)
   }
 }
 
+int 
+get_ticket_count_shift_queue(void)
+{
+  struct proc *p;
+  int total_ticket_count = 0;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == RUNNABLE && p->q==1){
+      // counting total active tickets
+      if(p->current_tickets>0)
+      {
+        total_ticket_count += p->current_tickets;
+      }
+      //shifting to queue 2
+      else
+      {
+        p->q=2;
+      }
+      
+    }
+    
+   release(&p->lock);
+  }
+
+  return total_ticket_count;
+}
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -445,29 +485,138 @@ void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *temp_proc=0; // temp_proc=0 means we have to schedule
+  int slice_streak=0; //used to keep track of time slices
   struct cpu *c = mycpu();
-  
+  uint64 initial_tick,current_tick,interval;
+  int total_ticket_count=0;
+
+  acquire(&tickslock);
+  initial_tick=ticks;
+  release(&tickslock);
+
+
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&tickslock);
+    current_tick=ticks;
+    release(&tickslock);
+
+    interval=current_tick-initial_tick;
+    //Boosting
+    if(interval>=BOOST_INTERVAL)
+    {
+      //printf("Boosted...");
+      for(p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if(p->state != UNUSED)
+        {
+          p->q=1;
+        }
+        release(&p->lock);
+      }
+      initial_tick =  current_tick;
+    }
+    //Scheduling
+    while(temp_proc==0)
+    {
+      //Searching queue 1 for process with remaining tickets
+      total_ticket_count=get_ticket_count_shift_queue();
+      int random_number = randomrange(0, total_ticket_count) + 1 ;
+      int current_ticket_count = 0;
+      //Lottery Scheduling
+      if(total_ticket_count>0)
+      {
+      for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if(p->state == RUNNABLE && p->q==1) {        
+        // Lottery logic
+        current_ticket_count += p->current_tickets;
+        // as soon as random number is less than current ticket count, we have our process
+        if(current_ticket_count >= random_number){
+          temp_proc=p;
+          slice_streak=TIME_LIMIT_1;
+          release(&p->lock);
+          // found our process, if not exited, next processes in serial will continue
+          break;
+
+        }
       }
       release(&p->lock);
     }
+      }
+      else
+      {
+        //Round Robin Scheduling
+        for(p = proc; p < &proc[NPROC] ; p++) {
+            acquire(&p->lock);
+            //Setting all runnable process 0 current tickets to initial ticket count 
+            if(p->state == RUNNABLE && p->current_tickets<=0)
+                {
+                    p->current_tickets=p->initial_tickets;
+                }
+            //Found our process 
+            if(p->state != UNUSED && p->q==2) 
+            {
+                  temp_proc=p;
+                  slice_streak=TIME_LIMIT_2;
+                  release(&p->lock);
+                  break;
+            }
+      release(&p->lock);
+    }
+      }
+    }
+
+    acquire(&temp_proc->lock);
+    if(temp_proc->state==RUNNABLE)
+    {
+      // Switch to chosen process.  It is the process's job
+      // to release its lock and then reacquire it
+      // before jumping back to us.
+      temp_proc->state=RUNNING;
+      c->proc=temp_proc;
+      swtch(&c->context,&temp_proc->context);
+      // Process is done running for now.
+      // It should have changed its running_proc->state before coming back.
+      c->proc=0;
+
+      if(temp_proc->q==1)
+      {
+        temp_proc->current_tickets--;
+        if(temp_proc->current_tickets==0)
+        {
+          temp_proc->q=2;
+        }
+      }
+      slice_streak--;
+      temp_proc->ticks_used++;
+      if(slice_streak<=0)
+      {
+        temp_proc->q=2;
+        release(&temp_proc->lock);
+        temp_proc=0;
+      }
+    }
+    else if(temp_proc->state == SLEEPING || temp_proc->state ==ZOMBIE)
+    {
+      if(temp_proc->q == 2)
+      {
+        temp_proc->q = 1;
+      }
+      release(&temp_proc->lock);
+      temp_proc=0;
+    }
+
+    if(temp_proc)
+    {
+      release(&temp_proc->lock);
+    }
+    
   }
 }
 
@@ -681,3 +830,52 @@ procdump(void)
     printf("\n");
   }
 }
+
+int 
+settickets(int tickets)
+{
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  if(tickets > 0)
+  {
+    p->initial_tickets = tickets;
+    release(&p->lock);
+    return 0;
+  }
+  else
+  {
+    p->initial_tickets = DEFAULT_TICKET_COUNT;
+    release(&p->lock);
+    return -1;
+  }
+  
+}
+
+int 
+getpinfo(uint64 pst)
+{
+  struct proc *p;
+  struct pstat temp;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == UNUSED)
+    {
+      temp.inuse[i] = -1;
+    }
+    else
+    {
+      temp.inuse[i] = (p->state == RUNNABLE || p->state == RUNNING) ? 1 : 0;
+    }
+    
+    temp.pid[i] = p->pid;
+    temp.tickets_original[i] = p->initial_tickets;
+    temp.tickets_current[i] = p->current_tickets;
+    temp.time_slices[i] = p->ticks_used;
+    temp.inQ[i]=p->q;
+    release(&p->lock);
+    i++;
+  }
+  return copyout(myproc()->pagetable, pst, (char*)&temp, sizeof(temp));
+}
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..cf60219 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -92,6 +92,10 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+  int initial_tickets;         // Number of tickets initially assigned for lottery scheduler
+  int current_tickets;         // Number of current tickets for lottery schedule
+  int ticks_used;              // Number of time slots the process has been scheduled to
+  int q;                       // Queue where the process belongs(q=1 of lottery;q=2 for roundrobin)
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..de941fd
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+#endif // _PSTAT_H_
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..97bafb3
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,34 @@
+#include "types.h"
+
+// Return a integer between 0 and ((2^32 - 1) / 2), which is 2147483647.
+uint
+random(void)
+{
+  // Taken from http://stackoverflow.com/questions/1167253/implementation-of-rand
+  // Courtesy: https://github.com/joonlim/xv6/blob/master/random.c
+  static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
+  unsigned int b;
+  b  = ((z1 << 6) ^ z1) >> 13;
+  z1 = ((z1 & 4294967294U) << 18) ^ b;
+  b  = ((z2 << 2) ^ z2) >> 27; 
+  z2 = ((z2 & 4294967288U) << 2) ^ b;
+  b  = ((z3 << 13) ^ z3) >> 21;
+  z3 = ((z3 & 4294967280U) << 7) ^ b;
+  b  = ((z4 << 3) ^ z4) >> 12;
+  z4 = ((z4 & 4294967168U) << 13) ^ b;
+
+  return (z1 ^ z2 ^ z3 ^ z4) / 2;
+}
+
+// Return a random integer between a given range.
+int
+randomrange(int lo, int hi)
+{
+  if (hi < lo) {
+    int tmp = lo;
+    lo = hi;
+    hi = tmp;
+  }
+  int range = hi - lo + 1;
+  return random() % (range) + lo;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6f86681 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..da165ba 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..f7b88a9 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,20 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_settickets(void)
+{
+  int n;
+  argint(0,&n);
+  return settickets(n);
+  
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0,&addr);
+  return getpinfo(addr);
+ 
+}
\ No newline at end of file
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..cae8e45
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,39 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+    if(argc != 2){
+        printf("Usage: testticket <number of tickets>\n");
+        exit(1);
+    }
+    printf("Trying to set tickets.\n");
+    int number = atoi(argv[1]);
+    if(settickets(number)==-1){
+        printf("Error while setting tickets.\n");
+        exit(1);
+    }
+    else
+    {
+        printf("Successfully set tickets.\n");
+    }
+    int rc = fork();
+    if(rc<0){
+        printf("Error forking\n");
+        exit(1);
+    }
+    else if(rc==0){
+        // child process
+        while(1){
+            // running
+        }
+    }
+
+    // while(1){
+    //         // running
+    //     }
+    // while loop to make sure the process is not terminated
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..006ecd2
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,18 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int main (int argc, char *argv[])
+{
+    printf("Printing process info \n");
+    printf("PID | In Use | InQ | Original Tickets | Current Tickets | Time Slices\n");
+    struct pstat pst;
+    getpinfo(&pst);    
+    for (int i = 0; i < NPROC; i++) {
+        if (pst.inuse[i] != -1) {
+            printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n", pst.pid[i], pst.inuse[i],pst.inQ[i], pst.tickets_original[i], pst.tickets_current[i], pst.time_slices[i]);
+        }
+    }    
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..4362328 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getpinfo(struct pstat*);
+int settickets(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..b7ddd8b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getpinfo");
+entry("settickets");
