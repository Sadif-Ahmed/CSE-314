diff --git a/Makefile b/Makefile
index 39a99d7..f5d6d0b 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/thread_spinlock.o $U/thread_mutex.o $U/conditional_variable.o $U/counting_semaphore.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_thread\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8af79e7 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            thread_freepagetable(pagetable_t, uint64);
+int             thread_make(void (*)(void *), void *, void *);
+int             thread_sync(int);
+int             thread_sleep(uint64, int);
+int             thread_wake(uint64, uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +178,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            tuvmcopy(pagetable_t, pagetable_t, uint64,uint64);
+void            tuvmfree(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..2b5d7a8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -15,6 +15,11 @@ struct proc *initproc;
 int nextpid = 1;
 struct spinlock pid_lock;
 
+//Memory id initialisation
+int memid=1;
+struct spinlock memid_lock;
+
+
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
@@ -51,8 +56,10 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&memid_lock,"memid");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock,"mem");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -101,7 +108,16 @@ allocpid()
 
   return pid;
 }
-
+int
+allocmemid()
+{
+  int tempmemid;
+  acquire(&memid_lock);
+  tempmemid=memid;
+  memid++;
+  release(&memid_lock);
+  return tempmemid;
+}
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -159,7 +175,17 @@ freeproc(struct proc *p)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
   if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  {
+    if(p->isthread)
+    {
+      thread_freepagetable(p->pagetable,p->sz);
+    }
+    else
+    {
+      proc_freepagetable(p->pagetable, p->sz);
+    }
+  }
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +195,9 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->memid=0;
+  p->isthread=0;
+  p->memlock_parent=0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -215,6 +244,14 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+void
+thread_freepagetable(pagetable_t pagetable,uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  tuvmfree(pagetable, sz);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -261,16 +298,51 @@ growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
-
+  acquire(&p->lock);
+  acquire(p->memlock_parent);
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(p->memlock_parent);
       return -1;
     }
+    else
+    {
+      struct proc *tempproc;
+      for(tempproc = proc; tempproc < &proc[NPROC]; tempproc++)
+       {
+        if(tempproc != p)
+        {
+          acquire(&tempproc->lock);
+          if(tempproc->memid==p->memid)
+          {
+            tuvmcopy(p->pagetable,tempproc->pagetable,tempproc->sz,sz-tempproc->sz);
+            tempproc->sz=sz;
+          }
+          release(&tempproc->lock);
+        }
+
+       }
+    }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    struct proc *pp;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp!=p)
+    {
+      acquire(&pp->lock);
+      if(pp->memid == p->memid)
+      {
+        pp->sz=sz;
+      }
+      release(&pp->lock);
+    }
+  }
+
   }
   p->sz = sz;
+  release(p->memlock_parent);
+  release(&p->lock);
   return 0;
 }
 
@@ -288,6 +360,9 @@ fork(void)
     return -1;
   }
 
+  np->memid = allocmemid();
+  np->memlock_parent = &np->memlock;
+
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -348,6 +423,56 @@ exit(int status)
 {
   struct proc *p = myproc();
 
+  if(!p->isthread)
+  {
+    acquire(&wait_lock);
+    for(;;)
+    {
+      uint64 kidcount=0;
+      struct proc *pp;
+      for(pp = proc; pp < &proc[NPROC]; pp++)
+      {
+        if(pp->isthread && pp->memid == p->memid)
+        {
+          acquire(p->memlock_parent);
+          acquire(&pp->lock);
+          if(pp->state == ZOMBIE)
+          {
+            freeproc(pp);
+            release(&pp->lock);
+          }
+          else
+          {
+            if(!pp->killed)
+            {
+              int pid = pp->pid;
+              release(&pp->lock);
+              kill(pid);
+            }
+            else
+            {
+              release(&pp->lock);
+            }
+            kidcount=1;
+          }
+          release(p->memlock_parent);
+        }
+
+      }
+      if(kidcount == 0)
+      {
+        break;
+      }
+
+      sleep(p,&wait_lock);
+    }
+
+
+  release(&wait_lock);
+    }
+
+
+
   if(p == initproc)
     panic("init exiting");
 
@@ -371,7 +496,14 @@ exit(int status)
   reparent(p);
 
   // Parent might be sleeping in wait().
-  wakeup(p->parent);
+  if(p->isthread)
+  {
+    wakeup(p->origin_proc);
+  }
+  else
+  {
+    wakeup(p->parent);
+  }
   
   acquire(&p->lock);
 
@@ -400,7 +532,7 @@ wait(uint64 addr)
     // Scan through table looking for exited children.
     havekids = 0;
     for(pp = proc; pp < &proc[NPROC]; pp++){
-      if(pp->parent == p){
+      if(pp->parent == p && !pp->isthread){
         // make sure the child isn't still in exit() or swtch().
         acquire(&pp->lock);
 
@@ -515,7 +647,6 @@ void
 forkret(void)
 {
   static int first = 1;
-
   // Still holding p->lock from scheduler.
   release(&myproc()->lock);
 
@@ -681,3 +812,156 @@ procdump(void)
     printf("\n");
   }
 }
+int thread_make(void (* fcn)(void *), void *arg, void *stack)
+{
+   int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  // acquire(p->memlock_used);
+  if((np = allocproc()) == 0){
+    release(p->memlock_parent);
+    return -1;
+  }
+
+  np->memid = p->memid;
+  np->memlock_parent = p->memlock_parent;
+  // Mirror user memory from parent to child.
+  tuvmcopy(p->pagetable, np->pagetable, 0, p->sz);
+
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Set argument
+  np->trapframe->a0 = (uint64)arg;
+
+  // // Set stack pointer
+  np->trapframe->sp = (uint64)stack + PGSIZE - sizeof(uint32) - 1;
+  uint32 return_address = 0xffffffff;
+
+  if(copyout(np->pagetable, (uint64)stack + PGSIZE - sizeof(uint32), (char *)&return_address, sizeof(uint32))){
+    freeproc(np);
+    release(&np->lock);
+    release(p->memlock_parent);
+    return -1;
+  }
+
+  // // Set thread routine
+  np->trapframe->epc = (uint64)fcn;
+
+  // Is a thread
+  np->isthread = 1;
+
+  if(p->isthread){
+    np->origin_proc = p->origin_proc;
+  }else{
+    np->origin_proc = p;
+  }
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+int thread_sync(int thread_id)
+{
+  int wait, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for child thread.
+    wait = 0;
+    for(struct proc *pp = proc; pp < &proc[NPROC]; pp++){
+      acquire(p->memlock_parent);
+      acquire(&pp->lock);
+      if(pp->isthread && pp->pid == thread_id){
+        wait = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(p->memlock_parent);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+        release(p->memlock_parent);
+        break;
+      }
+      release(&pp->lock);
+      release(p->memlock_parent);
+    }
+
+    // No point waiting if we don't have the thread.
+    if(!wait || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+int thread_sleep(uint64 va, int value)
+{
+  struct proc *p = myproc();
+
+  acquire(p->memlock_parent);
+
+  uint64 va0 = PGROUNDDOWN(va);
+  uint64 pa = walkaddr(p->pagetable, va0) + va - va0;
+
+  if(__sync_bool_compare_and_swap((int *)pa, value, value))
+  {
+    sleep((void *)pa, p->memlock_parent);
+  }
+
+  release(p->memlock_parent);
+
+  return 0;
+}
+int thread_wake(uint64 va, uint64 count)
+{
+  struct proc *p = myproc();
+
+  acquire(p->memlock_parent);
+
+  uint64 va0 = PGROUNDDOWN(va);
+  uint64 pa = walkaddr(p->pagetable, va0) + va - va0;
+  struct proc * pp;
+  for(pp = proc; count > 0 && pp < &proc[NPROC]; pp++){
+    acquire(&pp->lock);
+    if(pp->chan == (void *)pa && pp->state == SLEEPING){
+      pp->state = RUNNABLE;
+      --count;
+    }
+    release(&pp->lock);
+  }
+
+  release(p->memlock_parent);
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..666b799 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct spinlock memlock;     //memory lock of process
+  struct spinlock *memlock_parent;//memory lock of parent process
+  uint64 memid;                 //process memory id
+  uint64 isthread;              // value set to 1 if thread
+  struct proc *origin_proc;      //Pointer to origin process
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..fcf0dbd 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_thread_yield(void);
+extern uint64 sys_thread_sleep(void);
+extern uint64 sys_thread_wake(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +132,12 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_thread_yield] sys_thread_yield,
+[SYS_thread_sleep] sys_thread_sleep,
+[SYS_thread_wake] sys_thread_wake,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c984462 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_thread_yield 25
+#define SYS_thread_sleep 26
+#define SYS_thread_wake 27
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..95dcbfe 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,62 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 start_routine_address;
+  uint64 argument_address;
+  uint64 stack_address;
+
+  argaddr(0, &start_routine_address);
+  argaddr(1, &argument_address);
+  argaddr(2, &stack_address);
+
+  return thread_make((void (*)(void *))start_routine_address, (void *)argument_address, (void *)stack_address);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+
+  argint(0, &thread_id);
+
+  return thread_sync(thread_id);
+}
+uint64
+sys_thread_exit(void)
+{
+   exit(0);
+   return 0;
+}
+uint64
+sys_thread_yield(void)
+{
+  yield();
+  return 0;
+}
+uint64
+sys_thread_sleep(void)
+{
+  uint64 va;
+  int value;
+
+  argaddr(0, &va);
+  argint(1, &value);
+
+  return thread_sleep(va, value);
+
+}
+uint64
+sys_thread_wake(void)
+{
+  uint64 va;
+  uint64 count;
+
+  argaddr(0, &va);
+  argaddr(1, &count);
+
+  return thread_wake(va, count);
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..f34eeeb 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,6 +296,14 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+void
+tuvmfree(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -332,6 +340,21 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+void
+tuvmcopy(pagetable_t old, pagetable_t new, uint64 from, uint64 sz)
+{
+  pte_t *pte;
+  uint64 end = from + sz;
+
+  for(uint64 i = from; i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("tuvmcopy: old pte should exist");
+    uint64 pa = PTE2PA(*pte);
+    int flags = PTE_FLAGS(*pte);
+    mappages(new, i, PGSIZE, (uint64)pa, flags);
+  }
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/conditional_variable.c b/user/conditional_variable.c
new file mode 100644
index 0000000..9703f92
--- /dev/null
+++ b/user/conditional_variable.c
@@ -0,0 +1,48 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "conditional_variable.h"
+#include "thread_mutex.h"
+
+void cond_init(struct condvar *cv)
+{
+    cv->count_waiting=0;
+    cv->prev_count_waiting=0;
+}
+
+void cond_wait(struct condvar *cv,struct thread_mutex *mtx)
+{
+    __sync_synchronize();
+   // just fetch maintaining atomicity, add is not intended
+    int count = __sync_fetch_and_add(&cv->count_waiting, 0);
+    // set cv->prevoius_count maintaining atomicity
+    __sync_bool_compare_and_swap(&cv->prev_count_waiting, cv->prev_count_waiting, count);
+
+    thread_mutex_unlock(mtx);
+    thread_sleep((uint64)&cv->count_waiting, count);
+    thread_mutex_lock(mtx);
+
+}
+
+void cond_signal(struct condvar *cv)
+{
+    __sync_synchronize();
+    // set equal to previous_count + 1 maintaining atomicity, don't want to increment previous_count
+    int count = __sync_fetch_and_add(&cv->prev_count_waiting, 0) + 1;
+    
+    // set cv->prevoius_count maintaining atomicity
+    __sync_bool_compare_and_swap(&cv->count_waiting, cv->count_waiting, count);
+
+    thread_wake((uint64)&cv->count_waiting, 1);
+}
+
+void cond_broadcast(struct condvar *cv)
+{
+    __sync_synchronize();
+    // set equal to previous_count + 1 maintaining atomicity, don't want to increment previous_count
+    int count = __sync_fetch_and_add(&cv->prev_count_waiting, 0) + 1;
+
+    // set cv->prevoius_count maintaining atomicity
+    __sync_bool_compare_and_swap(&cv->count_waiting, cv->count_waiting, count);
+    thread_wake((uint64)&cv->count_waiting, (unsigned long long)-1);    // (unsigned long long)-1 = UINT64_MAX in std=c++20
+}
\ No newline at end of file
diff --git a/user/conditional_variable.h b/user/conditional_variable.h
new file mode 100644
index 0000000..4847454
--- /dev/null
+++ b/user/conditional_variable.h
@@ -0,0 +1,5 @@
+struct condvar
+{
+    int count_waiting;
+    int prev_count_waiting;
+};
\ No newline at end of file
diff --git a/user/counting_semaphore.c b/user/counting_semaphore.c
new file mode 100644
index 0000000..4a63b74
--- /dev/null
+++ b/user/counting_semaphore.c
@@ -0,0 +1,35 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "conditional_variable.h"
+#include "thread_mutex.h"
+#include "counting_semaphore.h"
+
+int thread_sem_init(struct counting_semaphore *sem,int value)
+{
+    sem->count=value;
+    thread_mutex_init(&sem->mtx);
+    cond_init(&sem->cv);
+    return 0;
+}
+int thread_sem_post(struct counting_semaphore *sem)
+{
+    thread_mutex_lock(&sem->mtx);
+    sem->count++;
+    if(sem->count==1)
+    {
+        cond_signal(&sem->cv);
+    }
+    thread_mutex_unlock(&sem->mtx);
+    return 0;
+}
+int thread_sem_wait(struct counting_semaphore *sem)
+{
+    thread_mutex_lock(&sem->mtx);
+    while (sem->count == 0) {
+        cond_wait(&sem->cv, &sem->mtx); /*unlock mutex, wait, relock mutex */
+    }
+    sem->count--;
+    thread_mutex_unlock(&sem->mtx);
+    return 0;
+}
diff --git a/user/counting_semaphore.h b/user/counting_semaphore.h
new file mode 100644
index 0000000..e466a5f
--- /dev/null
+++ b/user/counting_semaphore.h
@@ -0,0 +1,6 @@
+struct counting_semaphore
+{
+    int count;
+    struct thread_mutex mtx;
+    struct condvar cv;
+};
\ No newline at end of file
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..d630bf4
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,147 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "thread_mutex.h"
+#include "thread_spinlock.h"
+#include "conditional_variable.h"
+#include "counting_semaphore.h"
+
+struct queue{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+	
+};
+void queue_init(struct queue* q)
+{
+    q->front = 0;
+	q->rear = 0;
+	q->size = 0;
+
+}
+void queue_push(struct queue* q,int x)
+{
+		q->arr[q->rear] = x;
+		q->rear = (q->rear+1)%16;
+		q->size++;
+}
+int queue_front(struct queue* q)
+{
+		if(q->size==0)
+			return -1;
+		return q->arr[q->front];
+}
+void queue_pop(struct queue* q)
+{
+		q->front = (q->front+1)%16;
+		q->size--;
+}
+
+struct queue q;
+// a mutex object lock 
+struct thread_mutex mtx;
+// a semaphore object empty
+struct counting_semaphore empty;
+// a semaphore object full
+struct counting_semaphore full;
+
+struct thread_mutex print_lock;
+
+void init_semaphore()
+{
+	// initialize mutex lock
+    thread_mutex_init(&mtx);
+	// initialize semaphore empty with 5
+    thread_sem_init(&empty,5);
+	// initialize semaphore full with 0
+    thread_sem_init(&full,0);
+
+    thread_mutex_init(&print_lock);
+
+}
+
+void  ProducerFunc(void * arg)
+{	
+    thread_mutex_lock(&print_lock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&print_lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        thread_sem_wait(&empty);
+
+		// wait for mutex lock
+        thread_mutex_lock(&mtx);
+		
+		sleep(1);	
+		queue_push(&q,i);
+        thread_mutex_lock(&print_lock);
+		printf("producer produced item %d\n",i);
+		thread_mutex_unlock(&print_lock);
+		// unlock mutex lock	
+        thread_mutex_unlock(&mtx);
+		// post semaphore full
+        thread_sem_post(&full);
+	}
+    thread_exit();
+    return;
+}
+
+void  ConsumerFunc(void * arg)
+{
+    thread_mutex_lock(&print_lock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&print_lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+        thread_sem_wait(&full);
+		// wait for mutex lock
+        thread_mutex_lock(&mtx);
+ 		
+			
+		sleep(1);
+		int item = queue_front(&q);
+		queue_pop(&q);
+        thread_mutex_lock(&print_lock);
+		printf("consumer consumed item %d\n",item);	
+        thread_mutex_unlock(&print_lock);
+
+
+		// unlock mutex lock
+        thread_mutex_unlock(&mtx);
+		// post semaphore empty	
+        thread_sem_post(&empty);	
+	}
+    thread_exit();
+    return;
+}
+
+int main(void)
+{	
+	
+	init_semaphore();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2, r1, r2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	r1 = thread_join(thread1);
+  	r2 = thread_join(thread2);	
+
+	printf("Threads finished: (%d):%d, (%d):%d\n",
+      thread1, r1, thread2, r2);
+	exit(0);
+}
diff --git a/user/thread.c b/user/thread.c
new file mode 100644
index 0000000..bde8ad0
--- /dev/null
+++ b/user/thread.c
@@ -0,0 +1,82 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "thread_spinlock.h"
+#include "thread_mutex.h"
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+struct thread_mutex printlock;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    struct balance *b = (struct balance*) arg;
+    thread_mutex_lock(&printlock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&printlock);
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+        thread_spin_lock(&lock);
+        thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	     if(old != total_balance)
+         {
+            thread_mutex_lock(&printlock);
+            printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+            thread_mutex_unlock(&printlock);
+         }
+         total_balance = old + 1;
+         thread_mutex_unlock(&mlock);
+         thread_spin_unlock(&lock);
+
+    }
+    thread_mutex_lock(&printlock);
+    printf( "Done s:%x\n", b->name);
+    thread_mutex_unlock(&printlock);
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&printlock);
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/thread_mutex.c b/user/thread_mutex.c
new file mode 100644
index 0000000..51f2aea
--- /dev/null
+++ b/user/thread_mutex.c
@@ -0,0 +1,42 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "thread_mutex.h"
+
+void thread_mutex_init(struct thread_mutex *mtx)
+{
+    mtx->mutex_state=0;
+    mtx->owner_id=0;
+}
+void thread_mutex_lock(struct thread_mutex *mtx)
+{
+    int pid = getpid();
+    if(pid == mtx->owner_id)
+    {
+        printf("error:trying to lock owned mutex\n");
+        exit(-1);
+    }
+    while(__sync_lock_test_and_set(&mtx->mutex_state, 1) != 0)
+    {
+        thread_yield();
+    }
+
+    mtx->owner_id = pid;
+
+    __sync_synchronize();
+}
+void thread_mutex_unlock(struct thread_mutex *mtx)
+{
+    int pid = getpid();
+
+    if(mtx->owner_id != pid)
+    {
+        printf("error:trying to unlock unowned mutex\n");
+        exit(-1);
+    }
+
+    mtx->owner_id = 0;
+
+    __sync_synchronize();
+    __sync_lock_release(&mtx->mutex_state);
+}
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..4c9b27a
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,5 @@
+struct thread_mutex
+{
+    int mutex_state;
+    int owner_id;
+};
\ No newline at end of file
diff --git a/user/thread_spinlock.c b/user/thread_spinlock.c
new file mode 100644
index 0000000..974cac5
--- /dev/null
+++ b/user/thread_spinlock.c
@@ -0,0 +1,41 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "thread_spinlock.h"
+
+
+void thread_spin_init(struct thread_spinlock *lk)
+{
+    lk->locked_state=0;
+    lk->owner_id=0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk)
+{
+    int pid = getpid();
+
+    if(lk->owner_id == pid)
+    {
+        printf("error: attempt to lock owned spinlock\n");
+        exit(-1);
+    }
+
+    while(__sync_lock_test_and_set(&lk->locked_state, 1) != 0);
+    lk->owner_id=pid;
+    __sync_synchronize();
+
+}
+void thread_spin_unlock(struct thread_spinlock *lk)
+{
+    int pid = getpid();
+    if(lk->owner_id != pid)
+    {
+        printf("error: attempt to unlock spinlock not owned\n");
+        exit(-1);
+    }
+
+    lk->owner_id = 0;
+
+    __sync_synchronize();
+    __sync_lock_release(&lk->locked_state);
+}
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..8210118
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,5 @@
+struct thread_spinlock
+{
+    int locked_state;
+    int owner_id;
+};
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..4775228 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,8 @@
 struct stat;
+struct thread_spinlock;
+struct thread_mutex;
+struct condvar;
+struct counting_semaphore;
 
 // system calls
 int fork(void);
@@ -22,6 +26,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void (*)(void *), void *, void *);
+int thread_join(int);
+int thread_exit(void);
+int thread_yield(void);
+int thread_sleep(uint64, int);
+int thread_wake(uint64, uint64);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +49,24 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+
+// thread_mutex.c
+void thread_mutex_init(struct thread_mutex*);
+void thread_mutex_lock(struct thread_mutex*);
+void thread_mutex_unlock(struct thread_mutex*);
+
+// thread_spinlock.c
+void thread_spin_init(struct thread_spinlock*);
+void thread_spin_lock(struct thread_spinlock*);
+void thread_spin_unlock(struct thread_spinlock*);
+
+// conditional_variable.c
+void cond_init(struct condvar*);
+void cond_wait(struct condvar*,struct thread_mutex*);
+void cond_signal(struct condvar*);
+void cond_broadcast(struct condvar*);
+
+// counting_semaphore.c
+int thread_sem_init(struct counting_semaphore*,int);
+int thread_sem_post(struct counting_semaphore*);
+int thread_sem_wait(struct counting_semaphore*);
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..c6c0656 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("thread_yield");
+entry("thread_sleep");
+entry("thread_wake");
\ No newline at end of file
