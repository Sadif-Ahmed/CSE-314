diff --git a/Makefile b/Makefile
index 39a99d7..918c8b7 100644
--- a/Makefile
+++ b/Makefile
@@ -132,7 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\
+	
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
 
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..9cc349a 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tracedstate=0; //tracing flag reset
 }
 
 // Create a user page table for a given process, with no user memory,
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..983cf39 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int tracedstate;             //tracing flag field
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..8d8bc28 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,14 @@
 #include "syscall.h"
 #include "defs.h"
 
+//Argument types
+#define SYS_ARG_INT 1
+#define SYS_ARG_ADDR 2
+#define SYS_ARG_STR 3
+#define NONE 4
+//Lock for pid
+struct spinlock pidlock;
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -66,6 +74,7 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -101,6 +110,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void); //added instance
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,22 +136,153 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace, //added function pointer entry
+};
+//local array of syscallnames
+char *syscallnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+};
+//local array of syscall argument counts
+int syscallargcount[] = {
+[SYS_fork]    0,
+[SYS_exit]    1,
+[SYS_wait]    1,
+[SYS_pipe]    1,
+[SYS_read]    3,
+[SYS_kill]    1,
+[SYS_exec]    2,
+[SYS_fstat]   2,
+[SYS_chdir]   1,
+[SYS_dup]     1,
+[SYS_getpid]  0,
+[SYS_sbrk]    1,
+[SYS_sleep]   1,
+[SYS_uptime]  0,
+[SYS_open]    2,
+[SYS_write]   3,
+[SYS_mknod]   3,
+[SYS_unlink]  1,
+[SYS_link]    2,
+[SYS_mkdir]   1,
+[SYS_close]   1,
+[SYS_trace]   1,
+};
+//local array of syscall arhument types
+int syscallargtypes[][6] = {
+[SYS_fork]    {NONE,NONE,NONE,NONE,NONE,NONE},
+[SYS_exit]    {SYS_ARG_INT,NONE,NONE,NONE,NONE,NONE},
+[SYS_wait]    {SYS_ARG_ADDR,NONE,NONE,NONE,NONE,NONE},
+[SYS_pipe]    {SYS_ARG_ADDR,NONE,NONE,NONE,NONE,NONE},
+[SYS_read]    {SYS_ARG_INT,SYS_ARG_ADDR,SYS_ARG_INT,NONE,NONE,NONE},
+[SYS_kill]    {SYS_ARG_INT,NONE,NONE,NONE,NONE,NONE},
+[SYS_exec]    {SYS_ARG_STR,SYS_ARG_ADDR,NONE,NONE,NONE,NONE},
+[SYS_fstat]   {SYS_ARG_INT,SYS_ARG_ADDR,NONE,NONE,NONE,NONE},
+[SYS_chdir]   {SYS_ARG_STR,NONE,NONE,NONE,NONE,NONE},
+[SYS_dup]     {SYS_ARG_INT,NONE,NONE,NONE,NONE,NONE},
+[SYS_getpid]  {NONE,NONE,NONE,NONE,NONE,NONE},
+[SYS_sbrk]    {SYS_ARG_INT,NONE,NONE,NONE,NONE,NONE},
+[SYS_sleep]   {SYS_ARG_INT,NONE,NONE,NONE,NONE,NONE},
+[SYS_uptime]  {NONE,NONE,NONE,NONE,NONE,NONE},
+[SYS_open]    {SYS_ARG_STR,SYS_ARG_INT,NONE,NONE,NONE,NONE},
+[SYS_write]   {SYS_ARG_INT,SYS_ARG_ADDR,SYS_ARG_INT,NONE,NONE,NONE},
+[SYS_mknod]   {SYS_ARG_STR,SYS_ARG_INT,SYS_ARG_INT,NONE,NONE,NONE},
+[SYS_unlink]  {SYS_ARG_STR,NONE,NONE,NONE,NONE,NONE},
+[SYS_link]    {SYS_ARG_STR,SYS_ARG_STR,NONE,NONE,NONE,NONE},
+[SYS_mkdir]   {SYS_ARG_STR,NONE,NONE,NONE,NONE,NONE},
+[SYS_close]   {SYS_ARG_INT,NONE,NONE,NONE,NONE,NONE},
+[SYS_trace]   {SYS_ARG_INT,NONE,NONE,NONE,NONE,NONE},
 };
-
 void
 syscall(void)
 {
   int num;
+//Lock and release pidlock
+  acquire(&pidlock);
   struct proc *p = myproc();
+  int proc_id= p->pid;
+  release(&pidlock);
+
 
   num = p->trapframe->a7;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    //print pid,syscall names and arguments
+    if(p->tracedstate==num)
+  {
+
+    printf("pid: %d, syscall: %s args: ",proc_id,syscallnames[num]);
+    int argcount = syscallargcount[num];
+    if(argcount!=0)
+    {
+      char arg_str[100];
+      int arg_int;
+      uint64 arg_addr;
+      printf("( ");
+      for(int i=0;i<argcount;i++)
+      {
+        switch (syscallargtypes[num][i])
+        {
+        case SYS_ARG_INT:
+          argint(i,&arg_int);
+          printf(" %d ",arg_int);
+          break;
+        case SYS_ARG_ADDR:
+          argaddr(i,&arg_addr);
+          printf(" %p ",arg_addr);
+          break;
+        case SYS_ARG_STR:
+          argstr(i,arg_str,100);
+          printf(" %s ",arg_str);
+          break;
+        case NONE:
+          break;
+        default:
+          break;
+        }
+        if(i!=argcount-1)
+        {
+          printf(",");
+        }
+      }
+      printf(" ) ");
+    }
+
+
+
+  }
     p->trapframe->a0 = syscalls[num]();
+    //print return value
+    if(p->tracedstate==num)
+    {
+      printf("return value: %d \n",p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
+
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..6ea40d8 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22 //defined syscall
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..d3b3dfd 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,13 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//addded syscall definition
+uint64
+sys_trace(void)
+{
+
+  argint(0,&myproc()->tracedstate);
+
+  return 0;
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..3dd9b4c
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..abe8507 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int); //added trace(int)
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d908dc2 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
\ No newline at end of file
